const express = require("express");
const { Op } = require("sequelize");
const Product = require("../models/Product");
const Category = require("../models/Category");

const router = express.Router();

// üìå 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
router.post("/", async (req, res) => {
    try {
        const { nameProd, price, categoryId, image, stock, isHit, isNew, isSale } = req.body; // `image` –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–æ–π

        if (!nameProd || !price || !categoryId) {
            return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const category = await Category.findByPk(categoryId);
        if (!category) {
            return res.status(404).json({ message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        const newProduct = await Product.create({
            nameProd,
            price,
            categoryId,
            image,
            stock,
            isHit: Boolean(isHit),
            isNew: Boolean(isNew),
            isSale: Boolean(isSale)
        });
        res.status(201).json(newProduct);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

// üìå 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å `image`)
router.put("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const { nameProd, price, categoryId, image, stock, isHit, isNew, isSale } = req.body; // `image` —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞

        const product = await Product.findByPk(id);
        if (!product) {
            return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        if (categoryId) {
            const category = await Category.findByPk(categoryId);
            if (!category) {
                return res.status(404).json({ message: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
            }
        }

        product.nameProd = nameProd || product.nameProd;
        product.price = price || product.price;
        product.categoryId = categoryId || product.categoryId;
        product.image = image !== undefined ? image : product.image; // –ï—Å–ª–∏ `image` –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        product.stock = stock || product.stock;

         // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
        product.isHit = isHit !== undefined ? Boolean(isHit) : product.isHit;
        product.isNew = isNew !== undefined ? Boolean(isNew) : product.isNew;
        product.isSale = isSale !== undefined ? Boolean(isSale) : product.isSale;

        await product.save();
        res.json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω", product });
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

router.get("/ishits", async (req, res) => {
    try {
        const products = await Product.findAll({ where: { isHit: true } });
        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

router.get("/isnews", async (req, res) => {
    try {
        const products = await Product.findAll({ where: { isNew: true } });
        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

router.get("/issales", async (req, res) => {
    try {
        const products = await Product.findAll({ where: { isSale: true } });
        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

router.get("/search", async (req, res) => {
    const { query } = req.query;
    
    if (!query) return res.status(400).json({ message: "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å" });
    
    try {
        const results = await Product.findAll({
        where: {
            nameProd: {
                [Op.iLike]: `%${query}%`, // PostgreSQL –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            },
        },
    });
        
        res.json(results);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", error: err.message });
    }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –ø–æ ID
router.get("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const product = await Product.findByPk(id, { include: Category });

        if (!product) {
            return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(product);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

// üìå 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ `categoryId`
router.get("/", async (req, res) => {
    try {
        const { categoryId } = req.query;

        const whereClause = categoryId ? { categoryId } : undefined;

        const products = await Product.findAll({
            where: whereClause,
            include: Category,
        });

        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});

// üìå 4. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
router.delete("/:id", async (req, res) => {
    try {
        const { id } = req.params;

        const product = await Product.findByPk(id);
        if (!product) {
            return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        await product.destroy();
        res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω" });
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
    }
});


module.exports = router;
