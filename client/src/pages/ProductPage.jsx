import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { toggleFavoriteLocally } from "../store/slices/favoriteSlice";
import { Link } from "react-router-dom";
import HeaderMain from '../components/HeaderMain';

import noPhoto from "../assets/no-photo.png";

const ProductPage = () => {
  const dispatch = useDispatch();
  
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [error, setError] = useState("");

  const [guestEmail, setGuestEmail] = useState("");
  const [guestName, setGuestName] = useState("");

  const [comments, setComments] = useState([]);
  const [commentText, setCommentText] = useState("");
  const [commentError, setCommentError] = useState("");
  const [commentSuccess, setCommentSuccess] = useState("");

  const [qna, setQna] = useState([]); // –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
  const [questionText, setQuestionText] = useState(""); // –¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const [answerTexts, setAnswerTexts] = useState({}); // –¢–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: { [questionId]: text }
  const [openAnswerFor, setOpenAnswerFor] = useState(null); // id –≤–æ–ø—Ä–æ—Å–∞, –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞
  const [qnaError, setQnaError] = useState("");
  const [qnaSuccess, setQnaSuccess] = useState("");

  const token = useSelector((state) => state.auth.token);
  const user = useSelector((state) => state.auth.user);
  const favoriteIds = useSelector(state => state.favorites.ids);
  
  useEffect(() => {
     // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞
    fetch(`${process.env.REACT_APP_API_URL}/api/products/${id}`)
      .then(res => res.json())
      .then(data => setProduct(data))
      .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞", err));

    // üîπ –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
    fetch(`${process.env.REACT_APP_API_URL}/api/comments/product/${id}`)
      .then(res => res.json())
      .then(data => setComments(data))
      .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", err));

    // üîπ –ó–ê–ì–†–£–ó–ö–ê –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í
    fetch(`${process.env.REACT_APP_API_URL}/api/qna/product/${id}`)
      .then(res => res.json())
      .then(data => setQna(data))
      .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QnA", err));

  }, [id]);

  const handleAddToCart = async () => {
    if (quantity > product.stock) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${product.stock}`);
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/cart/add`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          productId: product.id,
          quantity,
        }),
      });

      const data = await response.json();
      if (response.ok) {
        alert("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É");
      } else {
        // console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", data);
        alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É");
      }
      if (!response.ok) {
        if (response.status === 400) {
          setError(data.message); // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        } else {
          setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É");
        }
        return;
      }
      setError(""); // —Å–±—Ä–æ—Å –µ—Å–ª–∏ –≤—Å—ë –æ–∫
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", err);
      alert("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  };

  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => setError(""), 3000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  const handleQuantityChange = (e) => {
    let value = parseInt(e.target.value);
    if (isNaN(value) || value < 1) {
      setQuantity(1);
    } else if (value > product.stock) {
      alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—Å–µ–≥–æ: ${product.stock}`);
      setQuantity(product.stock);
    } else {
      setQuantity(value);
    }
  };

  const handleCommentSubmit = async (e) => {
      e.preventDefault();
      setCommentError("");
      setCommentSuccess("");

      if (!commentText.trim()) {
          setCommentError("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
          return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π
      if (!token && (!guestName.trim() || !guestEmail.trim())) {
          setCommentError("–î–ª—è –≥–æ—Å—Ç–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏–º—è –∏ email");
          return;
      }

      try {
          const payload = {
              productId: id,
              text: commentText,
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥–æ—Å—Ç—è
          if (token && user) {
              payload.userId = user.id;
          } else {
              payload.guestName = guestName;
              payload.guestEmail = guestEmail;
          }

          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/comments`, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  ...(token && { Authorization: `Bearer ${token}` }), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
              },
              body: JSON.stringify(payload),
          });

          const data = await response.json();

          if (response.ok) {
              setCommentSuccess("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!");
              setCommentText("");
              setGuestName("");
              setGuestEmail("");
          } else {
              setCommentError(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
          }
      } catch (err) {
          console.error("–û—à–∏–±–∫–∞:", err);
          setCommentError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
      }
  };

  const handleDeleteQnA = async (id) => {
    if (!token) return;
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å? –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")) return;
  
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/qna/${id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
  
      const data = await response.json();
      if (response.ok) {
        // –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setQna(prev => prev.filter(q => q.id !== id && q.parentId !== id));
      } else {
        alert(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
  const handleAskQuestion = async (e) => {
      e.preventDefault();
      if (!questionText.trim()) {
          setQnaError("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å");
          return;
      }
      if (!token) {
          setQnaError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
          return;
      }

      try {
          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/qna`, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({
                  productId: id,
                  text: questionText,
                  // parentId –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º - —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
              }),
          });

          const data = await response.json();
          if (response.ok) {
              setQnaSuccess("–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω!");
              setQuestionText("");
              setQna(prev => [{ ...data, answers: [] }, ...prev]); 
          } else {
              setQnaError(data.message || "–û—à–∏–±–∫–∞");
          }
      } catch (err) {
          console.error("–û—à–∏–±–∫–∞:", err);
          setQnaError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞");
      }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
  const handleSubmitAnswer = async (questionId) => {
      const text = answerTexts[questionId] || "";
      if (!text.trim()) {
          setQnaError("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç");
          return;
      }

      try {
          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/qna`, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({
                  productId: id,
                  text: text,
                  parentId: questionId, // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
              }),
          });

          const data = await response.json();
          if (response.ok) {
            setQnaSuccess("–û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
            setAnswerTexts(prev => ({ ...prev, [questionId]: "" }));
            setQna(prevQna =>
              prevQna.map(item =>
                item.id === questionId
                  ? { ...item, answers: [ ...(item.answers || []), data ] }
                  : item
              )
            );
            setOpenAnswerFor(null); // –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
          } else {
              setQnaError(data.message || "–û—à–∏–±–∫–∞");
          }
      } catch (err) {
          console.error("–û—à–∏–±–∫–∞:", err);
          setQnaError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞");
      }
  }; 

  const toggleFavorite = async (productId) => {
      const token = localStorage.getItem("token");
      if (!token) {
          alert("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏");
          return;
      }

      const isFavorite = favoriteIds.includes(productId);

      try {
          const response = await fetch(
              `${process.env.REACT_APP_API_URL}/api/favorites/${isFavorite ? 'remove/' : 'add/'}${productId}`,
              {
                  method: isFavorite ? "DELETE" : "POST",
                  headers: {
                      "Content-Type": "application/json",
                      Authorization: `Bearer ${token}`,
                  },
              }
          );

          if (!response.ok) {
              const data = await response.json();
              throw new Error(data.message || "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º");
          }

          dispatch(toggleFavoriteLocally(productId));
      } catch (err) {
          alert(err.message);
      }
  };

  if (!product) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <>
    <HeaderMain />
    <div style={{ padding: 20 }} className="wrapp__product-page">
      <h1>{product.nameProd}</h1>
      {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
      <div className="wrapp" style={{ 
        display: "flex", 
        flexWrap: "wrap", 
        gap: "20px",
        marginBottom: "20px"
      }}>
        {/* –ï—Å–ª–∏ –µ—Å—Ç—å images, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤—Å–µ */}
        {product.images && product.images.length > 0 ? (
          product.images.map((img, index) => (
            <div key={index} className="wrapper" style={{
              border: "1px solid #eee",
              borderRadius: "8px",
              padding: "10px",
              width: "300px"
            }}>
              <img
                src={`${process.env.REACT_APP_API_URL}${img.startsWith("/") ? "" : "/uploads/"}${img}`}
                alt={`${product.nameProd} - ${index + 1}`}
                style={{ 
                  width: "100%",
                  height: "auto",
                  objectFit: "contain"
                }}
              />
            </div>
          ))
        ) : (
          // –ï—Å–ª–∏ –Ω–µ—Ç images, –≤—ã–≤–æ–¥–∏–º product.image –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
          <div className="wrapper" style={{
            border: "1px solid #eee",
            borderRadius: "8px",
            padding: "10px",
            width: "300px"
          }}>
            <img
              src={product.image ? `${process.env.REACT_APP_API_URL}${product.image}` : noPhoto}
              alt={product.nameProd}
              style={{ 
                width: "100%",
                height: "auto",
                objectFit: "contain"
              }}
            />
          </div>
        )}
      </div>
      <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</strong> {product.stock}</p>
      <p><strong>–¶–µ–Ω–∞:</strong> {product.price} $</p>
      <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {product.Category?.name || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}</p>
      <div>{product.isHit ? '–•–∏—Ç' : ''}</div>
      <div>{product.isNew ? '–ù–æ–≤–∏–Ω–∫–∞' : ''}</div>
      <div>{product.isSale ? '–ê–∫—Ü–∏—è' : ''}</div>
      {/* –†–∞–∑–º–µ—Ä—ã */}
      {product.sizes && product.sizes.length > 0 && (
        <div style={{ marginBottom: 20 }}>
          <h3 style={{ marginBottom: 10 }}>–†–∞–∑–º–µ—Ä—ã:</h3>
          <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
            {product.sizes.map((size, index) => (
              <div 
                key={index}
                style={{
                  padding: "6px 12px",
                  border: "1px solid #ddd",
                  borderRadius: 4,
                  backgroundColor: "#f5f5f5"
                }}
              >
                {size}
              </div>
            ))}
          </div>
        </div>
      )}
      {/* –¶–≤–µ—Ç–∞ */}
      {product.colors && product.colors.length > 0 && (
        <div style={{ marginBottom: 20 }}>
          <h3 style={{ marginBottom: 10 }}>–¶–≤–µ—Ç–∞:</h3>
          <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
            {product.colors.map((color, index) => (
              <div 
                key={index}
                style={{
                  width: 30,
                  height: 30,
                  borderRadius: "50%",
                  backgroundColor: color,
                  border: "1px solid #ddd",
                  cursor: "pointer"
                }}
                title={color}
              />
            ))}
          </div>
        </div>
      )}
      {product.description && (
          <p style={{ marginBottom: '20px', lineHeight: '1.5' }}>{product.description}</p>
      )}
      {/* üîπ –§–û–†–ú–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø */}
      <div className="comments__modules">
          <h3>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</h3>
          {commentSuccess && <p style={{ color: "green" }}>{commentSuccess}</p>}
          {commentError && <p style={{ color: "red" }}>{commentError}</p>}
          <form onSubmit={handleCommentSubmit}>
              {/* –ü–æ–ª—è –¥–ª—è –≥–æ—Å—Ç–µ–π */}
              {!token && (
                  <>
                      <input
                          type="text"
                          placeholder="–í–∞—à–µ –∏–º—è"
                          value={guestName}
                          onChange={(e) => setGuestName(e.target.value)}
                          style={{ marginBottom: "10px", padding: "8px", width: "100%", maxWidth: "300px" }}
                      />
                      <input
                          type="email"
                          placeholder="–í–∞—à email"
                          value={guestEmail}
                          onChange={(e) => setGuestEmail(e.target.value)}
                          style={{ marginBottom: "10px", padding: "8px", width: "100%", maxWidth: "300px" }}
                      />
                  </>
              )}
              <textarea
                  placeholder="–í–∞—à –æ—Ç–∑—ã–≤..."
                  value={commentText}
                  onChange={(e) => setCommentText(e.target.value)}
                  rows={4}
                  style={{ width: "100%", maxWidth: "500px", padding: "8px", marginBottom: "10px" }}
              />
              <br />
              <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
          </form>
      </div>

      {/* üîπ –°–ü–ò–°–û–ö –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í */}
      <div style={{ marginTop: "40px" }}>
          <h3>–û—Ç–∑—ã–≤—ã ({comments.length})</h3>
          {comments.length === 0 ? (
              <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.</p>
          ) : (
              comments.map((comment) => (
                  <div key={comment.id} style={{ 
                      border: "1px solid #ddd", 
                      padding: "15px", 
                      marginBottom: "15px", 
                      borderRadius: "5px" 
                  }}>
                      <strong>
                          {comment.User ? comment.User.name : comment.guestName}
                      </strong>
                      <span style={{ color: "gray", fontSize: "0.9em", marginLeft: "10px" }}>
                          {new Date(comment.createdAt).toLocaleDateString()}
                      </span>
                      <p style={{ marginTop: "10px" }}>{comment.text}</p>
                  </div>
              ))
          )}
      </div>
      {/* üîπ –†–ê–ó–î–ï–õ –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í */}
      <div>
          <h3>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ({qna.length})</h3>
          {qnaError && <p style={{ color: "red" }}>{qnaError}</p>}
          {qnaSuccess && <p style={{ color: "green" }}>{qnaSuccess}</p>}

          {/* –§–æ—Ä–º–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ */}
          <div style={{ marginBottom: "30px" }}>
              <h4>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h4>
              {token ? (
                  <form onSubmit={handleAskQuestion}>
                      <textarea
                          placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ..."
                          value={questionText}
                          onChange={(e) => setQuestionText(e.target.value)}
                          rows={3}
                          style={{ width: "100%", maxWidth: "500px", padding: "8px" }}
                      />
                      <br />
                      <button type="submit" style={{ marginTop: "10px" }}>–°–ø—Ä–æ—Å–∏—Ç—å</button>
                  </form>
              ) : (
                  <p>–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <Link to="/login">–≤–æ–π–¥–∏—Ç–µ</Link> –≤ —Å–∏—Å—Ç–µ–º—É.</p>
              )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          {qna.length === 0 ? (
              <p>–ü–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
          ) : (
              qna.map((question) => (
                  <div key={question.id} style={{ 
                      border: "1px solid #eee", 
                      padding: "15px", 
                      marginBottom: "20px", 
                      borderRadius: "5px" 
                  }}>
                      {/* –í–æ–ø—Ä–æ—Å */}
                      <div>
                          <strong>–í–æ–ø—Ä–æ—Å:</strong>
                          <p>{question.text}</p>
                          <small style={{ color: "gray" }}>
                            –æ—Ç {user.username} / —Ä–æ–ª—å: {user.role}, {new Date(question.createdAt).toLocaleDateString()}
                          </small>
                            {/* –ö—Ä–µ—Å—Ç–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
                            {user?.role === "admin" && (
                              <button 
                                onClick={() => handleDeleteQnA(question.id)} 
                                style={{ marginLeft: "10px", color: "red", cursor: "pointer" }}
                              >
                                ‚úñ
                              </button>
                            )}
                      </div>

                      {/* –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å */}
                      {question.answers && question.answers.length > 0 && (
                          <div style={{ marginLeft: "20px", marginTop: "15px" }}>
                              <strong>–û—Ç–≤–µ—Ç—ã:</strong>
                              {question.answers.map((answer) => (
                                  <div key={answer.id} style={{ 
                                      borderLeft: "3px solid #ccc", 
                                      paddingLeft: "10px", 
                                      marginTop: "10px" 
                                  }}>
                                      <p>{answer.text}</p>
                                      <small style={{ color: "gray" }}>
                                          –æ—Ç {user.username} / —Ä–æ–ª—å: {user.role}, {new Date(answer.createdAt).toLocaleDateString()}
                                      </small>
                                      {user?.role === "admin" && (
                                        <button 
                                          onClick={() => handleDeleteQnA(answer.id)} 
                                          style={{ marginLeft: "10px", color: "red", cursor: "pointer" }}
                                        >
                                          ‚úñ
                                        </button>
                                      )}
                                  </div>
                              ))}
                          </div>
                      )}
                      {/* –§–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ -> –ø–æ –∫–ª–∏–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º) */}
                      {token ? (
                        <>
                          <button
                            style={{ marginTop: "10px" }}
                            onClick={() =>
                              setOpenAnswerFor(prev => (prev === question.id ? null : question.id))
                            }
                          >
                            {openAnswerFor === question.id ? "–û—Ç–º–µ–Ω–∏—Ç—å" : "–û—Ç–≤–µ—Ç–∏—Ç—å"}
                          </button>

                          {openAnswerFor === question.id && (
                            <div style={{ marginTop: "10px" }}>
                              <textarea
                                placeholder="–í–∞—à –æ—Ç–≤–µ—Ç..."
                                value={answerTexts[question.id] || ""}
                                onChange={(e) =>
                                  setAnswerTexts(prev => ({ ...prev, [question.id]: e.target.value }))
                                }
                                rows={2}
                                style={{ width: "100%", maxWidth: "400px", padding: "8px" }}
                              />
                              <br />
                              <button
                                onClick={() => handleSubmitAnswer(question.id)}
                                style={{ marginTop: "5px" }}
                              >
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                              </button>
                            </div>
                          )}
                        </>
                      ) : (
                        <p style={{ marginTop: "10px", fontSize: "0.9em" }}>
                          <Link to="/login">–í–æ–π–¥–∏—Ç–µ</Link>, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.
                        </p>
                      )}
                  </div>
              ))
          )}
      </div>
      <Link className='prod__brand' to={`/brand/${product.brand}`}>{product.brand}</Link>
      <button onClick={() => toggleFavorite(product.id)}>
          {favoriteIds.includes(product.id) ? "‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
      </button>
      <div style={{ display: "flex", alignItems: "center", marginTop: 20 }}>
        <button onClick={() => setQuantity(prev => Math.max(1, prev - 1))} disabled={quantity <= 1}>-</button>
        <input
          type="text"
          min="1"
          max={product.stock}
          value={quantity}
          onChange={handleQuantityChange}
          style={{ margin: "0 10px", width: 60, textAlign: "center" }}
        />
        <button onClick={() => {
          if (quantity < product.stock) setQuantity(prev => prev + 1);
          else alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—Å–µ–≥–æ: ${product.stock}`);
        }}>
          +
        </button>
      </div>
      {error && (
        <div style={{ color: "red", margin: "10px 0" }}>
          {error}
        </div>
      )}
      <button
        onClick={handleAddToCart}
        style={{ marginTop: 20, padding: "10px 20px" }}
      >
        –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
      </button>
    </div>
    </>
  );
};

export default ProductPage;
